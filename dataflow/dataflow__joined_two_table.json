{
	"name": "dataflow__joined_two_table",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "departmenttable",
						"type": "DatasetReference"
					},
					"name": "department"
				},
				{
					"dataset": {
						"referenceName": "employee",
						"type": "DatasetReference"
					},
					"name": "employee"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputjoined",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Department_id as string,",
				"          Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> department",
				"source(output(",
				"          Employee_id as string,",
				"          First_Name as string,",
				"          Last_Name as string,",
				"          Gender as string,",
				"          Salary as string,",
				"          Date_of_Birth as string,",
				"          Age as string,",
				"          Country as string,",
				"          Department_id as string,",
				"          Date_of_Joining as string,",
				"          Manager_id as string,",
				"          Currency as string,",
				"          End_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employee",
				"department, employee join(department@Department_id == employee@Department_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Joinedtable.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}